[ { "title": "Using N8N to get email alerts", "url": "/posts/Using-N8N-to-get-email-alerts/", "categories": "N8N, AI", "tags": "N8N,, Local, AI,, Automation", "date": "2025-06-06 21:00:00 +0100", "snippet": "Hey folks,This is a quick blog post on using N8N and local large language models to automate email notifications based on priority. The main reason behind this was to combat notification fatigue. Like many of you, I receive tonnes of emails daily and honestly about 90% of them are not worth the immediate attention they often demand.Why Tackle Notification Fatigue?Notification fatigue can dull our response to notifications, causing us to miss out on truly important messages. To avoid this, I decided to automate the process of sorting through emails by priority, ensuring that I only deal with what really matters when it truly matters.How I Set It UpUsing N8NThe heart of this setup involves using N8N, an open-source workflow automation tool. Here’s how I configured it: Email as Trigger: Using the SMTP connector as a trigger. This step activates whenever an email is received. Markdown Conversion: The emails are first converted to markdown. This helps in simplifying the text, making it easier for our local language model to process it. Summarization: We don’t use this in the categorization but we do use it later for our notification text. Categoriser: The next step is a text categoriser with the instructions to basically categorise the email into one of three, so high, medium or low priority and in the prompt for that, I’ve given it some instructions, so a high-priority email is really critical to me, and i’m going to need to get them straight away. A medium priority, I should read it, but if I reply to it in the next week or so, then that’s fine. And the low priority is newsletters and stuff like that, not something for the junk filter but maybe I will read it at some point. Depending on the category assigned by the model, the importance level of the follow-up notification in NTFY varies considerably.N8N FlowNotification Through NTFY High priority: Triggers an emergency mode alert on my phone. Low priority: No audible notification, silently logs for later reference.Why Local Models?One of my significant concerns was privacy and data security. By using local language models, I ensure that sensitive email data does not leave my server. Local models also allow me to use some tiny models that are pretty fast at doing this and with no cost other than power consumption.Challenges and SolutionsOne of the challenges is I could not get it to output proper JSON, what it was doing is{&quot;Medium Importance&quot;: true}And actually what I wanted to do is{&quot;High Importance&quot;: false, &quot;Medium Importance&quot;: true, &quot;Low Importance&quot;: false}So changing the model to gemma3:1b worked a little bit, but it still wasn’t perfect.The Auto-Fixingfeature in N8N allows it to basically check if the JSON is correctly formatted and if it’s not, it just reruns the inference again. And if you do that a couple of times, hopefully it gets it right, but sometimes it still wasn’t. So then changing the instructions was finally, what did it, so this is my prompt to do thatPlease classify the text provided by the user into one of the following categories: {categories}, Output your classification as JSON with true or false values for each category. Your response should strictly follow this format without additional explanations:And this seems to work pretty much all the time, I’ve not seen it fail on that since, but I also changed the model so that I did do it.Results and Further OptimizationsThis is a bit of a proof of concept really. What I’m using, I’m using Purelymail for the mail hosting, and they can allow me to point a domain at it as a catch all then the notification process will run.in the future we could add filters, so we only want to run this process on test@domain but we don’t want to run it at test2@domain, or whatever extra rules we want to add, so there’s more opportunities for cooler automations that maybe filter out newsletters by the email or something.ConclusionThis setup not only saves time but also ensures that I’m not overwhelmed by the volume of less important emails.I’m looking forward to refining this system further and exploring more sophisticated automations — maybe even incorporating filters based on specific email sender behaviors.Happy automating," }, { "title": "Teams Tagging with PowerApps &amp; Power Automate", "url": "/posts/Teams-Tagging-with-Power-Apps-&-Power-Automate/", "categories": "O365, Power-Platform", "tags": "Power-Automate, Power-Apps, Teams", "date": "2024-01-12 13:00:00 +0000", "snippet": "IntroductionRecently, I found myself in need of setting up a community team on Microsoft Teams. My goal was to enable members to select their areas of interest, like SharePoint or Excel, using a PowerApp. This way, they could ‘subscribe’ to specific topics. Then, whenever someone in the team wanted to discuss these topics, they could simply use tags like @SharePoint to notify the interested members. This approach seemed like an efficient way to keep our discussions organized and relevant to everyone’s interests.Understanding the WorkflowOverviewThe process involves: Creating a Power App: Users select their interests from pre-defined tags. Storing Data in SharePoint: The selections are saved to a SharePoint list. Using Power Automate: To dynamically update Teams tags based on changes in the SharePoint list. Managing Teams Tags: Ensuring continuity of tags.The Power AppDesigning the InterfaceIn my case I have an initial page displays all members, featuring a brief bio, their interests, and contact information, along with an “Edit Profile” button for updating personal info.The Edit screen has been created with the PowerCat Creator kit and uses just a standard combobox for the tags picker that eferences a SharePoint list’s choice column, where all tags are pre-defined.Integration with SharePointOn submission, the app writes the user’s choices to a SharePoint list that will trigger the Power Automate flow as the flow is watching for changes in this list.SharePoint List StructureThe list structure is pretty simple containing A person object of the O365 user the row relates to A free text bio column that the user can update A choice column that will contain all our tags A boolian field to control visibility in the public list (linked to a toggle switch in the app).Power Automate FlowTrigger The flow starts when a user’s entry in the SharePoint list is modified. This is tracked using the SharePoint trigger “When an item or file is modified”.ActionsRemoving All Tags From The User For Each User: The process begins with a loop through all users. For each user, the “Get user profile (V2)” action retrieves their Office 365 information. Retrieve All Tags: The next step involves fetching a list of all tags in the team using the “List all tags for a Team” action. This provides the display name and tag ID, (which we will need later). Tag Removal Process: For each tag, a nested loop is initiated to list all members associated with that tag using “List the members for a tag.” Within this loop, a condition checks if the current user (identified by their User ID) is a member of the tag. If the condition is met (i.e., the user’s ID matches the ID from the ‘Get user profile’ step), the user is removed from the tag using the “Delete a member from a tag” action. This approach ensures that all tags associated with a user are accurately identified and removed before updating them with new interests.Adding The New TagsAfter exiting the first loop, once all the tags associated with a user are deleted, we initiate our second main loop. This loop iterates through all the interests specified in the choice column of the SharePoint list. Iterate Through Interests: The loop goes through each interest listed in the SharePoint list’s choice column. Match Tags with Interests: Within this loop, we cycle through all the tags in our team. The goal is to check if the display name of any tag matches the selected interests from the list. Assigning Tags to User: If a match is found, we use the “Add member to a tag” action. This action requires the user’s ID (obtained from the “Get User Profile” step) and the tag ID (retrieved earlier from the “List all tags for a Team” step). Maintenance Service Account for Tag Continuity: To ensure no tag is inadvertently deleted, a service account is added to the team. This is crucial because if a tag has zero members, it will be automatically removed by Teams. Synchronizing Tags with SharePoint: It’s important to add each tag created in Teams to the SharePoint choice column. This synchronization is necessary for two reasons: it allows for automatic matching in the Power Automate flow and enables users to select these tags in the Power App. Optionally, certain tags in Teams, like @moderators, can be reserved for admin assignment only. These tags don’t necessarily need to be listed in the SharePoint column if they are not intended for user selection. Managing Flow Expiration: Microsoft Power Automate has an expiration policy where flows that haven’t run for 60 or 90 days (depending on the licensing) are automatically turned off. To prevent this, you can periodically update a tag such as adding or removing one from your profile every 60 days. Alternatively, simply reactivate the flow when you receive an email notification about its deactivation. Full Flow" }, { "title": "Restricting Entra Groups with Administrative Units", "url": "/posts/Restricting-Entra-Groups-with-Administrative-Units/", "categories": "Entra, Security, Administration", "tags": "Administrative, Units, Access, Control, Entra", "date": "2024-01-11 12:00:00 +0000", "snippet": "Restricting Entra Groups with Administrative UnitsOften, you may need to create a user or group in Entra that different teams can manage, without granting them broad access to modify all users or groups. For example, you might want the applications team to modify the ‘applications’ group, while the service desk should be able to add or remove people from these groups without the ability to delete or rename them. To achieve this, we can utilize Administrative Units (AUs) in Entra. AUs allow us to set up distinct groups of administrators and define their specific permissions for certain objects.Understanding Administrative Units in EntraBefore we dive into the practical applications, let’s first understand what Administrative Units are.What are Administrative Units?Administrative Units are a feature in Entra that allow for the segregation of directory objects, such as users and groups, into separate units. This segregation enables you to delegate administrative tasks to different admins without granting them full administrative rights across the entire directory.Why Use Administrative Units? Enhanced Security: By limiting the scope of what each admin can control, the risk of unauthorized or accidental changes to critical parts of the directory is minimized. Organizational Efficiency: AUs allow for a more organized and manageable structure, especially in larger organizations. Customized Control: Administrative roles can be customised to specific needs of different departments or teams.Implementing Administrative UnitsTo setup AUs Go to entra.microsoft.com Under “Identity” section, click “Show More” and go to “Admin Units” Create an Admin Unit, in this example we will name it “Apps Team” Consider using the Restrictive Management option if you want to limit the management of objects within the AU exclusively to AU admins. This means that even Group Admins will not be able to modify these groups, which can be useful in certain scenarios. Click “Next” and select the role you would like the admin to have (this will be the role they get on objects within the AU). In my case I will select “Group Admin” and then select the users who will have this role.Now we have an AU setup we can apply it to a group this will mean that although ordinarily Alice does not have access to modify the group for this specific group she will have all the permissions of Group Admin.To assign an AU to a group: Go to entra.microsoft.com Navigate to “Groups” and then “All Groups.” Find the group you want to manage and click on “Administrative units.” Here, you can assign the “Apps Team” AU we created earlier. After assigning, it may take up to 60 seconds or so for the changes to replicate. Once done, Alice should now have control over this group without being listed as the Owner or being a member of the group.Restrictive ManagementIn the previous section, I mentioned Restrictive Management and its role in limiting access to certain groups. This feature is particularly useful when you want to prevent globally assigned Group Admins from editing specific groups. It’s also beneficial in scenarios where admins should have access to most groups, except a few select ones.To implement this: Assign the Group Admin role to all relevant admins as usual. This grants them broad access to most groups. Then, set up Administrative Units (AUs) for the specific groups you want to restrict access to. By applying Restrictive Management to these AUs, you can ensure that only designated admins within these units can manage the groups in question. This approach allows for a more granular control of group management, ensuring that certain groups remain under tighter control as per your requirements." }, { "title": "O365 Message Centre Sync to Planner", "url": "/posts/O365-Message-Centre-Sync/", "categories": "O365, Planner", "tags": "O365, Power-Automate, Message-Centre, Planner", "date": "2023-01-10 02:00:00 +0000", "snippet": "Syncing Message Centre to Planner &amp;amp; Auto TagSetting up sync and GroupSyncing Message Centre messages to planner is a good way to get an overview in your org of what changes are coming from Microsoft in the near future and prepare to act upon them.Luckily for us Microsoft have build this feature right into the O365 Message Centre, clicking the Planner Sync button will automatically create a Power Automate flow for us.The Planner that can be attached to a Team or Office 365 group. In my case I will create a dynamic O365 group with a dynamic membership rule to pick up users from other groups, this way management of this group will happen automatically based on the other teams.The rule syntax is shown below and we can add up to 50 groups this way.user.memberOf -any (group.objectId -in [&#39;GROUP-GUID&#39;,&#39;GROUP-GUID&#39;,&#39;GROUP-GUID&#39;])Once we have our group setup the MS Planner can attach to this and membership will be governed by the group(s) from the rule.Creating a Sharepoint ListFor the auto tagging in our use case we will create a Sharepoint List in the Office 365 group with the following structure Title Team Teams Team 1 Stream Team 2 Sharepoint Team 3 This will be used by our auto tagging flow to map the services to our TeamsAuto Tagging via Power Automate flowWe should now have messages populating into our Planner, from here we want to check what Microsoft service the message is for and tag it with the appropriate coloured tag. We will start with a When a new task is created trigger and select our group and plan. Next we will initialize a blank array called ‘teams’ To get the MS service in the message we will use a Find text position and the search text of ] Followed by a Substring that takes the output from our previous action, has a start position of ‘1’ and for the length we will use the following expression Note: The name of your text position step is used in the expression so if you have renamed it you will need to update it in the expression sub(outputs(&#39;Find_text_position&#39;)?[&#39;body&#39;],1) Some messages have multiple services so we will use a Compose action with the following expression to split the results on a comma split(outputs(&#39;Substring&#39;)?[&#39;body&#39;],&#39;, &#39;) Next we will use a Get Items and get our sharepoint list we made earlier. Following this we will crete an Apply to Each loop where the input is the output of our compose action Inside the loop we will create a second Apply to Each this time the input will be the output from our Sharepoint Get Items. Inside the 2nd loop we will add a Condition to check if the ‘Name’ of our Sharepoint item matches the ‘Current item’ from the first loop Under the If Yes section we will add an Append to Array and add the Team from our sharepoint list to the array we made at the start. Finally we are going to use the Update a Task (V2) to update task with tags For this example let’s assume Team 1 is blue, Team 2 is red and Team 3 is green For the Task ID we will use the ID from the trigger action and leave the rest default until we get to the tags. For each tag we will use it’s own expression this expression will check the array for a specific team name nad if found apply that tag, this way we can apply multiple tags if we need multiple teams assigned. For the blue tag we will use the expression contains(variables(&#39;teams&#39;),&#39;Team 1&#39;) For red the expression will be contains(variables(&#39;teams&#39;),&#39;Team 2&#39;) and for green it’s contains(variables(&#39;teams&#39;),&#39;Team 3&#39;) " }, { "title": "Surface Hub and Teams Rooms Coordinated Meetings", "url": "/posts/Coordinated-Meetings/", "categories": "O365, Teams", "tags": "Teams, Surface-Hub", "date": "2022-10-10 23:00:00 +0100", "snippet": "What is coordinated meetingsCoordinated meetings are setting that allow multiple meeting room devices to all join and leave calls together. This is useful if you have more than one surface hub in a single room or a mix of Teams rooms devices and surface hubs.In these settings you can decide which of the devices will use it’s mic and speakers to prevent feedback.Setting up Coordinated Meetings on Surface HubsIntuneSurface hubs can have coordinated meeting policies applied to them as documented in the MS Docs however due to the structure of the XML files this is only really useful if you want to maintain one policy per meeting room.Setup on deviceRecently Microsoft added the ability to setup coordinated meetings via the hub settings.To do this open teams, press the 3 dots to the left of the user icon and go to ‘Settings’ (you will have to login as admin). From here there is the option to setup coordinated meetings by specifying a trusted account and selecting if you want to use the mic/camera of the current device.Setting up Coordinated Meetings on Teams Rooms DevicesSimilarly to a surface hub this can be deployed via policy or as is possibly easier depending on the amount of setups you have you can open the settings on the device and setup you trusted device and mic/speakers.ConfigurationsOne Way TrustCoordinated Meetings can be configured in a one way trust, in this mode the device that trusts the other will call it into any meetings however the other device will not auto answer and will instead ring like a normal call.To set this up configure the trusted devices on Device 1 to trust Device 2 but do not setup coordinated meetings on Device 2 at all.Two way trustThis is a more standard configuration where both devices trust each other, in this mode calls started on Device 1 will ring and get auto answered on Device 2 and when left of Device 1 will also leave on Device 2.Something to note here is if I start a call on Device 1 then Device 2 will be auto joined, if I leave with Device 2 it will be unable to remove Device 1 from the call as the call was started by Device 1 so ideally you would want to start and end calls on the same device.Important noteWhen testing it seems the trusted device account seems to need to have the same domain name for all devices, if this is different coordinated meetings won’t work however there will be no visible errors." }, { "title": "Setting up a Power Platform Test Environment", "url": "/posts/Setup-Power-Platform-Env/", "categories": "O365, Power-Platform", "tags": "Power-Platform", "date": "2022-06-29 20:00:00 +0100", "snippet": "Table of Contents Setup O365 Tenant Setup fake users and content Optional Setup Adding a custom domain Branding Setup Power Platform environmentSetting up your O365 tenancyFirst step in getting a power platform environment is having an office 365 tenancy.This can be setup for free for development by using the Microsoft 365 Developer ProgramYou will need to attach payment details but these won’t be charged unless you utilize Azure premium services.Setting up fake users, SharePoint sites and activitySetting up users an activity is relatively easy and will likely be useful for future tests especially if you want to test permission based actions.To do this go to the MS Developer Program Dashboard with your regular Microsoft account used to setup the dev program and not the onmicrosoft.com account and run the automated tasks to set users, mail &amp;amp; events and SharePoint sites, you can run one or all 3 it’s up to you.There is currently no charge for this action.Optional setupYou should now have a fully setup O365 tenancy with 25 users, emails, activity and SharePoint sites.From here there are a few optional extras you can setup. Custom Domain If you have your own a custom domain you can set this up by logging into portal.azure.com with the onmicrosoft.com email setup with the tenant &amp;amp; going to Azure Active Directory and then to Custom domain names (or go here) press Add a custom domain and follow the steps to setup your DNS records. Note: You will still keep the onmicrosft.com domain however you can set your custom as default. Once setup and set as default you can go into Users go to each user press Edit Properties and change the User principal name and Email fields to use your new domain. Branding Another recommended config I would suggest is setting the branding, this will make it easy and quick to differentiate your test tenant from any real tenants you may use. To set this up go to admin.microsoft.com press Show all on the sidebar menu and go to Settings &amp;gt; Org Settings &amp;gt; Organization Profile &amp;gt; Custom Themes (or go here), from here you can edit the default theme and under logos add an image file to use and under colors setup your brand colors Next go to portal.azure.com and go to Company Branding and from here you can set a banner logo and Sign-in background. Once setup you will see your tenant icon on the top rail of most pages including power platform apps. Setting up the default power platform environmentNow you have setup a O365 Tenant you should have a default Power Platform environment, you can view and modify the settings by going to admin.powerplatform.microsoft.com/environmentsTo setup a Teams Power Platform environment go to admin.teams.microsoft.com drop down Teams from the sidebar and click Manage Teams from here you can add a team and add your user to it.Now open Teams either the desktop client or in a browser go to teams.microsoft.com press the 3 dots from the left side rail and go to More Apps, from here install the Power Apps app and create an app in the newly created team, this will generate the environment automatically and we will now be able to see it if we go back to the Power Platform admin center." } ]
